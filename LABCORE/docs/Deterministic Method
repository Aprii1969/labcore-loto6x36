**Детерминированному Методу Анализа и Прогнозирования для «Лото 6 из 36»**, включающая все детали настроек и внедрение концепции Soft-Pool. Это руководство предназначено для применения и должно служить исчерпывающим источником информации.

---

## **Детерминированный Метод Анализа и Прогнозирования для «Лото 6 из 36»: Полное Руководство по Применению**

### **1. Правила Игры "Лото 6 из 36"**

* **Выбор основных чисел**: 6 чисел из диапазона от 1 до 36.
* **Выбор бонусного числа**: 1 бонусное число из диапазона от 1 до 6.
* **Розыгрыш**: Проводится с использованием двух лототронов: одного для 6 основных чисел (из 36) и одного для бонусного числа (из 6).
* **Результат**: Определяются 7 выигрышных номеров: 6 основных и 1 бонусный.
* **Выигрыш**: Присуждается за совпадение определенного количества угаданных чисел с выпавшими выигрышными номерами согласно призовым категориям лотереи.

### **2. Источник и Подготовка Данных**

* **Основной источник**: Исторические данные розыгрышей "Лото 6 из 36" (например, файл `Loto6x36_Results.csv`, который должен постоянно актуализироваться).
* **Актуализация данных**: После каждого нового тиража (дневного нечётные тиражи  или вечернего чётные тиражи) его результаты немедленно добавляются в историческую базу данных. Все параметры и модели пересчитываются и дообучаются.

**Процедура предобработки данных:**

1.  **Загрузка данных**: Загрузка CSV-файла с историей тиражей.
2.  **Переименование колонок**: Стандартизация названий колонок для удобства работы (например, 'Розіграш' -> 'tirage', 'Дата проведення' -> 'date', 'Кулька номер 1' -> 'n1', ..., 'Бонусна кулька' -> 'bonus').
3.  **Идентификация типа тиража**: Добавление нового признака (`draw_type`) на основе номера тиража:
    * **Дневной тираж**: Нечетный номер тиража.
    * **Вечерний тираж**: Четный номер тиража.
4.  **Сортировка основных чисел**: В каждой строке основные 6 чисел (n1...n6) сортируются по возрастанию.

### **3. Применение Soft-Pool в Методе: Динамический Анализ и Классификация Номеров**

В основе метода лежит концепция **Soft-Pool**, которая заменяет жесткий фиксированный пул номеров на динамическую систему весов и категорий, непрерывно адаптирующуюся к поведению чисел.

**Для каждого номера `i` ∈ [1…36] и отдельно для каждого типа тиража (`draw_type`: 'дневной' / 'вечерний'):**

1.  **Базовые частотные метрики (F-метрики)**: Рассчитываются на основе истории *только данного типа тиража*.
    * `F5(i)` = (число появлений `i` в последних 5 тиражах *данного типа*) / 5.
    * `F10(i)` = (число появлений `i` в последних 10 тиражах *данного типа*) / 10.
    * `F20(i)` = (число появлений `i` в последних 20 тиражах *данного типа*) / 20.
    * `F50(i)` = (число появлений `i` в последних 50 тиражах *данного типа*) / 50.
    * `LF(i)` = (число появлений `i` в последних 500 тиражах *данного типа* или за весь период, если меньше) / 500.
2.  **Взвешенная частота (`W0`)**:
    * `W0(i) = 0.4 * F5(i) + 0.3 * F10(i) + 0.2 * F20(i) + 0.1 * F50(i)`.
3.  **Базовый вес (`W_base`)**:
    * `W_base(i) = 0.6 * LF(i) + 0.4 * W0(i)`.
4.  **Коэффициент класса (`ClassFactor`)**:
    * **Динамическая категоризация**: Номера классифицируются на "Hot", "Mid", "Cold" на основе **перцентилей `Dynamic_Weight` всех 36 номеров *данного типа тиража* на текущий момент**:
        * **Hot**: Топ 30% номеров по `Dynamic_Weight`.
        * **Mid**: Следующие 40% номеров.
        * **Cold**: Последние 30% номеров.
    * `ClassFactor(i)`:
        * Hot → ×1.05
        * Mid → ×1.00
        * Cold → ×0.95
5.  **Штраф за последний тираж (`LastDrawPenalty`)**:
    * -12% для чисел, выпавших в *самом последнем* тираже *данного типа*.
    * -3% для чисел, выпавших в последующих итерациях "Работы над ошибками" (если применимо).
6.  **Сезонный фактор (`SeasonFactor`)**: Учитывается влияние месяца/сезона (значение адаптируется из конфигурации).
7.  **Глобальный бонус Soft-Pool (`GlobalBonus_SoftPool`)**:
    * Это **накопленная поправка**, специфичная для каждого номера и каждого типа тиража (`Day_GlobalBonus_SoftPool` и `Evening_GlobalBonus_SoftPool`). Изначально равен 0.
    * Корректируется механизмом "Работы над ошибками": увеличивается для номеров, которые были "недооценены" (имели низкий `Dynamic_Weight`), но при этом выпали в выигрышной комбинации.

**Итоговый Динамический Вес (`Dynamic_Weight`)**:
* `Dynamic_Weight(i) = W_base(i) * ClassFactor(i) * SeasonFactor(i) * LastDrawPenalty(i) + GlobalBonus_SoftPool(i)`.

### **4. Модуль Прогнозирования Бонусного Номера (Усовершенствованный)**

Модуль прогнозирования бонусного номера является отдельным, но теперь также использует принципы Soft-Pool и разделение по типу тиража для повышения точности.

**Для каждого бонусного номера `j` ∈ [1…6] и отдельно для каждого типа тиража (`draw_type`):**

1.  **Расчет `Bonus_Dynamic_Weight(j)`**:
    * Включает F-метрики (F5, F10, F20, F50) специфичные для бонусного номера *данного типа тиража*.
    * Интервалы между выпадениями (средний, стандартное отклонение) и Коэффициент цикличности (`CycleCoef`).
    * Переходные вероятности (`TransitionBonus`).
    * `SeasonFactor`.
    * `Bonus_GlobalBonus_SoftPool(j)`: Накопленная поправка для бонуса, корректируемая "взбучкой".
2.  **Динамическая Категоризация Бонусных Номеров**: Бонусные номера (1-6) также динамически классифицируются на "Hot", "Mid", "Cold" на основе их `Bonus_Dynamic_Weight` *для данного типа тиража*.
3.  **Две специализированные модели (`LightGBM`)**:
    * **`Day_Bonus_Model`**: Обучена на последних 200 дневных тиражах с использованием всех признаков, включая `Bonus_Dynamic_Weight` и категорию бонусного номера.
    * **`Evening_Bonus_Model`**: Обучена на последних 200 вечерних тиражах с использованием всех признаков, включая `Bonus_Dynamic_Weight` и категорию бонусного номера.
4.  **Прогноз**: Каждая модель предсказывает **3 наиболее вероятных бонусных номера**.
5.  **Механизм "Взбучки" для Бонуса**: Применяется к соответствующей бонусной модели, если выигрышный бонус не попал в топ-3, корректируя `Bonus_GlobalBonus_SoftPool` и переобучая модель.

### **5. Генерация Комбинаций Основных Номеров (160 штук)**

Генерация комбинаций является наиболее комплексной частью, строго следующей аналитическим квотам.

1.  **Выбор Целевой Структуры:** Для прогнозируемого тиража (дневного или вечернего) генератор использует соответствующие **фиксированные квоты L/M/H и H/M/C паттернов**, полученные на основе анализа 50 тиражей (подробнее см. ниже).
2.  **Генерация по Квотам:** 160 комбинаций распределяются по этим квотам, строго соблюдая количество номеров из каждого `L/M/H` диапазона и из каждой `Hot/Mid/Cold` категории.
    * Выбор конкретных номеров происходит на основе их `Dynamic_Weight` (соответствующего типу тиража).
    * Учитываются **специфичные "горячие" пары** для данного типа тиража.
3.  **Structural-правила:**
    * **Разбивка на блоки**: Low (1-12), Mid (13-24), High (25-36).
    * Из каждого блока отбирается минимум 1, максимум 4 номера (в сумме ровно 6), **согласно L/M/H шаблону**.
    * Любая пара номеров внутри блока должна иметь `gap` ≥ 1.
    * Сумма комбинации ∈ \[75; 150].
4.  **ML-Фильтр (LightGBM)**: Сгенерированные 160 комбинаций проходят через адаптированный LightGBM-фильтр (обученный с учетом всех новых признаков и специфики дневных/вечерних тиражей). Он отбирает комбинации с наивысшим Predicted Score.
5.  **Интеграция Бонусного Номера**: 160 комбинаций основных номеров распределяются между 3 предсказанными бонусными номерами на основе их вероятностей (например, 50%-25%-25%).

#### **5.1. Принятые Квоты для Дневных Тиражей (`Day Pool` - из 40 комбинаций)**

| L/M/H | Квота (из 40) | H/M/C-паттерн (Day) | % (внутри L/M/H) |
| :---- | :------------ | :------------------ | :--------------- |
| **2/3/1** | **16** | `2H,3M,1C`          | 35 %             |
|         |             | `2H,2M,2C`          | 30 %             |
|         |             | `3H,2M,1C`          | 25 %             |
|         |             | `1H,3M,2C`          | 10 %             |
| **1/3/2** | **13** | `2H,3M,1C`          | 40 %             |
|         |             | `2H,2M,2C`          | 30 %             |
|         |             | `1H,3M,2C`          | 20 %             |
|         |             | `3H,2M,1C`          | 10 %             |
| **3/2/1** | **10** | `3H,2M,1C`          | 45 %             |
|         |             | `2H,2M,2C`          | 30 %             |
|         |             | `2H,1M,3C`          | 25 %             |
| **2/2/2** | **8** | `2H,2M,2C`          | 40 %             |
|         |             | `3H,2M,1C`          | 30 %             |
|         |             | `1H,3M,2C`          | 20 %             |
|         |             | `0H,3M,3C`          | 10 %             |
| **1/4/1** | **6** | `1H,4M,1C`          | 45 %             |
|         |             | `2H,3M,1C`          | 35 %             |
|         |             | `0H,4M,2C`          | 20 %             |
| **Остальные** | **~7** | (Разнообразные H/M/C паттерны для менее частых L/M/H) | -                |

*(Примечание: Округление квот до 40 комбинаций будет производиться автоматически системой)*

#### **5.2. Принятые Квоты для Вечерних Тиражей (`Evening Pool` - из 40 комбинаций)**

| L/M/H | Квота (из 40) | H/M/C-паттерн (Evening) | % (внутри L/M/H) |
| :---- | :------------ | :---------------------- | :--------------- |
| **2/2/2** | **14** | `2H,2M,2C`              | 40 %             |
|         |             | `1H,2M,3C`              | 30 %             |
|         |             | `2H,1M,3C`              | 20 %             |
|         |             | `3H,1M,2C`              | 10 %             |
| **3/2/1** | **13** | `2H,2M,2C`              | 35 %             |
|         |             | `1H,2M,3C`              | 30 %             |
|         |             | `3H,2M,1C`              | 25 %             |
|         |             | `2H,1M,3C`              | 10 %             |
| **1/3/2** | **11** | `1H,3M,2C`              | 40 %             |
|         |             | `2H,2M,2C`              | 30 %             |
|         |             | `1H,2M,3C`              | 20 %             |
|         |             | `0H,3M,3C`              | 10 %             |
| **2/1/3** | **10** | `2H,1M,3C`              | 40 %             |
|         |             | `1H,2M,3C`              | 30 %             |
|         |             | `2H,2M,2C`              | 20 %             |
|         |             | `1H,1M,4C`              | 10 %             |
| **4/1/1** | **8** | `1H,1M,4C`              | 45 %             |
|         |             | `2H,1M,3C`              | 30 %             |
|         |             | `0H,1M,5C`              | 25 %             |
| **Остальные** | **~24** | (Разнообразные H/M/C паттерны для менее частых L/M/H) | -                |

---

### **6. Метод основан на автоматизированном анализе статистики по всем историческим тиражам,
структурном управлении квотами (L/M/H, H/M/C), динамическом ранжировании номеров,
адаптивной корректировке, и постоянной калибровке, чтобы гарантировать стабильное качество прогноза (обычно ≥5 совпадений на тестовых прогонах).

Все параметры, данные и история хранятся в открытых json-файлах.
В системе LABCORE реализовано всё необходимое для “честной”, прозрачной проверки и автоматической настройки.

...

Пояснения для новичка
---------------------
- Обратный анализ — “строгий диагност”  Модуль обратного анализа (module_back.py)
Это “диагност” системы.. Находит скрытые сбои, чтобы не делать видимость “работы” системы.
- BlindTest — “честный экзаменатор”. Проверяет, не просто ли мы подогнали параметры под историю.Что такое Blind Test?
Это **тест на историческом тираже**,
где мы *искусственно* “не знаем” результат,
 и пытаемся его **восстановить с помощью генерации и коррекции**.
Главное:
* Мы **ничего не подстраиваем вручную**
* Генерация строится **исключительно на известных до тиража данных**
* Цель — показать, что метод сам дойдёт до 5+ / 6 при корректной настройке

- Сравнительный анализ Final Cycle Test— единственный критерий успеха: только он даёт право признать метод годным! внутри него всегда должен использоваться Blind Test как механизм генерации.
Мы НЕ можем генерировать комбинации, зная будущее
Мы должны делать точную симуляцию, как если бы находились в прошлом
Любые изменения — только после успешного полного цикла с Final Cycle Test!
---


Детерминированный метод основан на тщательном анализе исторических тиражей, выявлении структурных и зональных закономерностей, управлении квотами, паттернами пар, динамикой “сонных” и “горячих” номеров, а также на постоянной калибровке всех параметров для поддержания стабильного прогностического качества (например, ≥5 совпадений на тестовых прогонах).

LABCORE — это комплексная система, объединяющая:

* жёсткие структурные правила (“квоты” по L/M/H и H/M/C),
* динамическое ранжирование номеров (softpool, pool\_stats),
* адаптивную коррекцию (АКК),
* глубокий анализ (LABCORE-80),
* учёт паттернов пар (Glue), зон (Zone), “сонных” (Sleepy), а также двойные режимы генерации (A — стабильный, B — экспериментальный).

#### **c) АКК (Адаптивный контроллер калибровки)**

* После каждого тиража анализирует результат генерации.
* Если результат ниже порога (например, <5 совпадений), производит мягкую автоматическую коррекцию параметров:
  — меняет веса sleepy, квоты структур, корректирует зоны, усиливает glue, может обновить feedback.
* Производит 2–3 попытки добиться нужного результата (≥5 попаданий).

АКК (Адаптивный контроллер калибровки)в него встроен  Модуль обратного анализа module_back.py для выявления погрешностей , так же BlindTest — “честный экзаменатор”. Проверяет, не просто ли мы подогнали параметры под историю где мы *искусственно* “не знаем” результат,
 и пытаемся его **восстановить с помощью генерации и коррекции.  Так же в в конце проходит независимый СРАВНИТЕЛЬНЫЙ АНАЛИЗ (Final Cycle Test)Blind Test как механизм генерации, для выявления честного анализа результатов и по итогу смотрим достигнут рекомендуемый порог или нет, если нет то даётся сигнал чтобы LABCORE-80 провела глубокую диагностику


#### **d) LABCORE-80 (глубокая диагностика)**

* Запускается, если АКК не достиг порога за 2–3 попытки.
* Проводит глубокий разбор по 30 последним тиражам:
  — перебирает альтернативные структуры, квоты, зоны, повторно обучает модели.
  — фиксирует, какие параметры устарели, что мешает стабильности, какие паттерны дают сбой.
* После успешной стабилизации (устойчивое ≥6+ с бонусным на 30 тестах) — вносит коррекции в настройки, модели, структуры.

LABCORE-80 встроен  Модуль обратного анализа module_back.py для выявления погрешностей , так же BlindTest — “честный экзаменатор”. Проверяет, не просто ли мы подогнали параметры под историю где мы *искусственно* “не знаем” результат,
 и пытаемся его **восстановить с помощью генерации и коррекции.  Так же в в конце проходит независимый СРАВНИТЕЛЬНЫЙ АНАЛИЗ (Final Cycle Test)Blind Test как механизм генерации, для выявления честного анализа результатов и по итогу смотрим достигнут рекомендуемый порог или нет, если нет то цикл корректировки повторяется заново.  
#### **e) Observer/Glue/Sleepy-модуль**

* Находит:
  — “сонные” номера (не выпадали X тиражей),
  — glue-пары (номера, часто выпадающие вместе),
  — аномалии зон (например, H подряд дала всплеск).
* Его рекомендации попадают в feedback/adaptive\_feedback.json и могут быть учтены в генераторе и АКК.

---

### **7. Получение и обновление метрик**

* После каждого тиража:

  1. История загружается из labcore\_draws.csv.
  2. Строится “long”-таблица, для каждого номера рассчитываются: частота, последний раз, PSW, попадание в зоны.
  3. Обновляются pool\_stats.json, softpool\_config.json (по формуле, с учётом decay и трендов).
  4. Пересчитываются паттерны sleepy, glue, зоны.
  5. Все параметры сохраняются.

---

### **8. Генерация комбинаций**

* Генератор берёт актуальные квоты (структуры из base\_quota\_matrix.json).
* Для каждой структуры выбирает номера по зоне L/M/H и по весам (softpool),
  усиливает “сонные” (если есть рекомендация), учитывает glue-пары.
* В режиме B — может применять экспериментальные структуры и экстремальные схемы.

---

### **9. Механизмы корректировки и выявления погрешностей**

* **После генерации и анализа попаданий**:

  * Если достигнут порог — параметры фиксируются как успешные.
  * Если не достигнут — АКК корректирует softpool, зоны, квоты (2–3 попытки).
  * Если АКК не справился — LABCORE-80 перебирает альтернативные структуры/паттерны, повторно обучает модели, ищет причину сбоя.
* Вся история корректировок сохраняется в auto\_adjust\_log.json (и decay-фильтрах).
* Любое отклонение от стабильного результата сразу отслеживается системой и вызывает цикл дополнительной калибровки.

---

### **10. Как всё взаимосвязано**

* **pool\_stats/softpool** дают “живую” картину каждого номера, позволяют адаптировать веса и квоты “на лету”.
* **base\_quota\_matrix** управляет структурой генерации — это “скелет” прогноза.
* **Observer/feedback** — “нервная система”, быстро реагирующая на смену тренда, появление аномалий или скрытых паттернов.
* **АКК** — первая линия калибровки, корректирует мягко, быстро.
* **LABCORE-80** — “глубокая” служба техподдержки, разбирающая хронические сбои.
* Все параметры после изменений мгновенно попадают в рабочие конфиги, никакая коррекция не проходит “втемную”.

### **11. Особенности и нюансы**

* Любые изменения параметров прозрачны и логируются
* Метод адаптивен — всегда подстраивается под последние реальные тиражи
* Поддержка режимов “КОНТУР A — Stable и КОНТУР B — Experimental” позволяет тестировать новые гипотезы без риска для основной стратегии
* ВСЕ настройки связаны — нельзя менять квоты без учёта новых зон, нельзя усиливать glue без корректировки softpool и т.д.

       КОНТУР A — Stable и КОНТУР B — Experimental
--------------------------------------------

**Контур A — Stable (стабильный режим)**

- Работает на основе скользящего среднего, мягких корректировок и дельта-фильтрации изменений.
- Использует только проверенные, “устоявшиеся” квоты и структуры.
- Все коррекции происходят плавно (через decay), без резких переключений и резкого усиления паттернов.
- Нестабильность и аномалии “глушатся” фильтрами (structure_decay, auto_adjust_log).
- Логика: не допускать избыточной реакции на всплески и случайные совпадения. Метод “не дергается”, а поддерживает оптимальную стабильность.
- Прогноз на тираж всегда строится в первую очередь на базе стабильных структур.

**Контур B — Experimental (агрессивный режим)**

- Акцент на экспериментальные структуры, glue, агрессивные квоты и boost по сонным, glue и рисковым паттернам.
- Реагирует на свежие аномалии, всплески в зонах M/H, может временно включать экстремальные схемы.
- Если несколько тиражей подряд нет 6 — система “подкручивает” экстремальные структуры автоматически.
- Любая новая гипотеза или зона сначала проходит быстрый фильтр BlindTest (5 последних тиражей), если не прошла — блокируется.
- Если 3 провала — автоматический запуск LABCORE-80 для глубокого разбора.
- Вся логика — “искать шанс”, использовать нестандартные подходы и быстро реагировать на меняющуюся статистику.
- Экспериментальный профиль всегда работает только в “честном” режиме, никаких подгонок по будущему!

**Оба контура используют одни и те же базовые метрики, но реализуют разные “стили” генерации и коррекции.**


## **Резюме (шпаргалка):**

* **pool\_stats, softpool, base\_quota\_matrix, feedback** — твои “жёсткие файлы управления”
* **АКК** — калибрует после любого сбоя
* **LABCORE-80** — глубоко чинит систему, если АКК не справился
* **Observer** — мгновенно реагирует на любые всплески и “сонных”
* **Генератор** — собирает прогноз только по самой свежей структуре системы



Модуль обратного анализа (module_back.py)
Это “диагност” системы.

Он не генерирует прогнозы, а проверяет, что было бы, если бы LABCORE работал с прошлыми тиражами,
— и находит, где и почему метод дал сбой.

Что делает?

“Переигрывает” историю лото как бы “задним числом” (но без знания будущего).

Находит, в каких местах LABCORE терял стабильность, пропускал закономерности или неверно настраивал параметры.

Дает конкретные сигналы, что “здесь твой метод провалился, попробуй пересчитать параметры вот так”.

Зачем нужен?

Чтобы не просто чинить ошибки “на глаз”, а знать, какие именно настройки и где нужно донастроить,

Быстрее ловить “скользящие сбои” (когда кажется, что всё работает, но на дистанции — нет).

BlindTest
Это “честная имитация будущего”.

BlindTest — это когда мы делаем тестовые прогнозы только по тем данным, которые были известны до каждого конкретного тиража.

Например: для 100-го тиража используем только информацию из 1–99,
— никогда не “заглядываем вперёд”!

Зачем нужен?

Чтобы видеть, как реально ведёт себя метод,
— не “подгоняя” настройки под всё сразу, а “честно” воспроизводя ход времени.

Как LABCORE использует BlindTest?

Для проверки “устойчивости” метода: если метод на истории всё время давал ≥5 попаданий “вслепую” — значит он реально работает,
— если только “по настроенной истории” — значит это просто подгонка.


     МОДУЛИ LABCORE
--------------

1. Генератор комбинаций (generator.py)
   - Собирает комбинации по актуальным квотам и структурам.
   - Учитывает зоны (L/M/H), softpool (веса и динамику номеров), паттерны glue, sleepy, force_numbers.
   - Может работать как в стабильном режиме A, так и в экспериментальном B (меняя приоритеты структур, уровни boost и схемы сборки).

2. Сбор метрик и аналитика (pool_stats.json, softpool_config.json)
   - На каждый номер: частота выпадения, последний раз, “сонность”, зона (Hot/Warm/Cold/Sleepy).
   - Формирует “живую” картину лотерейного поля.

3. АКК (Адаптивный контроллер калибровки)
   - После каждого тиража пытается “мягко” скорректировать веса, зоны, квоты, sleepy/glue и выйти на порог (например, 5+).
   - Делает 2–3 попытки, анализирует причину просадки.
   - Сохраняет рекомендации и изменения в feedback/adaptive_feedback.json.

4. LABCORE-80 (глубокая диагностика)
   - Запускается, если АКК не справился за 2–3 попытки.
   - Проводит полный пересмотр параметров на глубине 30 тиражей: перебирает альтернативные структуры, паттерны, зоны, обучает модели заново.
   - После выхода на стабильный результат — сохраняет новые параметры.

5. Observer/Glue/Sleepy
   - Находит новые “сонные”, “горячие”, glue-пары, аномалии и формирует рекомендации.

6. Модуль обратного анализа (module_back.py)
   - “Переигрывает” историю, чтобы найти, где LABCORE давал сбои, и какие настройки требовали корректировки.
   - Диагностирует системные ошибки, подсказывает конкретные шаги для улучшения.

7. BlindTest
   - Это честная ретроспектива: для каждого тиража тест строится только на тех данных, что были ДО него.
   - Помогает увидеть, действительно ли метод работает на истории “без подгонки”.
   - Любая подстройка допускается только если она проходит через BlindTest.

8. СРАВНИТЕЛЬНЫЙ АНАЛИЗ (Final Cycle Test)
   - Итоговый, главный этап.
   - Генерация комбинаций идёт по “слепым” данным (BlindTest) и проводится полный прогон на последних 30+ тиражах.
   - Только если весь этот прогон проходит с рекомендуемым порогом (например, ≥5+ попаданий) — настройки метода признаются годными для дальнейшей работы.
   - Никакая корректировка не считается успешной, пока не прошла “честный экзамен” через Final Cycle Test на BlindTest.


КАК ПРОИСХОДИТ КОРРЕКТИРОВКА И КАЛИБРОВКА
-----------------------------------------

- После каждого тиража обновляются метрики, зоны, softpool, паттерны.
- АКК корректирует параметры, делает 2–3 попытки выхода на порог попаданий (например, 5+).
- Если не получилось — LABCORE-80 делает глубокий перебор на 30 тиражах, ищет скрытые ошибки, обучает новые параметры.
- Все корректировки и динамика логируются.
- После каждого цикла проводится Сравнительный анализ (Final Cycle Test): 
  — повторная “честная” генерация по BlindTest на истории.
- Только если вся цепочка прошла тест — конфиги признаются рабочими, и LABCORE допускает новую генерацию на будущий тираж.


КАК ВСЁ СВЯЗАНО
---------------
- pool_stats, softpool дают “живую” структуру поля номеров, динамические веса.
- base_quota_matrix — задаёт скелет генератора.
- Observer/feedback быстро реагирует на аномалии, меняет стратегию glue/sleepy/force.
- АКК — первая линия адаптации.
- LABCORE-80 — глубокий резерв/ремонт.
- Модуль обратного анализа — страхует от “скрытых сбоев” и подгонки.
- BlindTest и Final Cycle Test — единственный способ честно проверить, работает ли LABCORE в реальных условиях.
- Всё линкуется через json-файлы, которые доступны и прозрачны.


ПРАКТИЧЕСКИЙ ЦИКЛ LABCORE
-------------------------
1. Обновление истории (labcore_draws.csv)
2. Пересчёт всех метрик и зон
3. Запуск генератора комбинаций (контур A и/или B)
4. Проверка попаданий (по истории и в режиме BlindTest)
5. АКК — до 3 попыток коррекции
6. LABCORE-80 — глубокий разбор, если АКК не справился
7. Обратный анализ — поиск и устранение ошибок прошлого
8. BlindTest и Сравнительный анализ (Final Cycle Test) — обязательное прохождение честной ретроспективы на истории
9. Только после успешного теста — конфиги/параметры считаются рабочими!

   После поступления нового тиража:

Загружаются все актуальные конфиги из config/

Пересчитываются метрики, softpool, зоны, динамика для pool_stats

При необходимости (например, при новых паттернах или изменении распределения)
— обновляются quota_config, base_quota_matrix, softpool_config

core_settings.json фиксирует глобальные параметры, режим, версию, специальные флаги метода

Все новые модули (генератор, анализаторы, observer, AKK, обратный анализ):

Не только читают, но и обновляют соответствующие конфиги в config/

Все изменения (новые “сонные”, новые квоты, рекомендации observer, результаты обратного анализа и др.)
— фиксируются в этих json, чтобы LABCORE всегда работал на свежей информации

Любая “живость” системы, адаптация к новым паттернам, “отскок” и обучение — через работу с этими файлами!

Фиксация полного сценария автоматического обновления и retrain:
После каждого нового тиража:

Импорт истории

Пересчёт pool_stats, softpool, зон, sleepy, glue, квот, структур

Переобучение моделей

Генерация новых комбинаций

Анализ результатов (АКК, observer, module_back)

Сохранение рекомендаций и параметров обратно в config

